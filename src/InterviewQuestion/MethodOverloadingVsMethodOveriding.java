//| Feature                        | **Method Overloading**                                                                                                         | **Method Overriding**                                                                                                             |
//| ------------------------------ | ------------------------------------------------------------------------------------------------------------------------------ | --------------------------------------------------------------------------------------------------------------------------------- |
//| **1. Definition**              | Defining **multiple methods with the same name** in the same class but with **different parameters** (number, type, or order). | Defining a method in the **subclass** with the **same signature** (name, return type, and parameters) as in the **parent class**. |
//| **2. Class Requirement**       | Happens **within the same class**.                                                                                             | Happens **between parent and child class** (i.e., inheritance required).                                                          |
//| **3. Purpose**                 | To perform similar operations with different input types or parameters.                                                        | To provide **specific implementation** of a method that is already defined in the superclass.                                     |
//| **4. Keywords Used**           | No specific keyword.                                                                                                           | Uses `@Override` annotation (recommended, not mandatory).                                                                         |
//| **5. Static/Instance**         | Can be done with both static and instance methods.                                                                             | **Cannot override static methods** (those are hidden). Only instance methods can be overridden.                                   |
//| **6. Compile-time vs Runtime** | **Resolved at compile-time** (compile-time polymorphism).                                                                      | **Resolved at runtime** (runtime polymorphism).                                                                                   |
//| **7. Constructors**            | Constructors can be **overloaded**, not overridden.                                                                            | Constructors **cannot be overridden**.                                                                                            |
//| **8. Return Type**             | Return type **can be different** (if parameter list is different).                                                             | Return type **must be same** or **covariant** (child type of return type).                                                        |
//
